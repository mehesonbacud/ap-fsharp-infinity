# .circleci/config.yml

# Specify the config version - version 2.1 is latest.
version: 2.1
# Specify Terraform version
orbs:
  terraform: circleci/terraform@3.1.0

# Note: These are provided by the ayuda-acr-labs context
# - AP_CONTAINER_REGISTRY_HOST
# - AP_CONTAINER_REGISTRY_PASSWORD
# - AP_CONTAINER_REGISTRY_USERNAME
# - AP_USER_ASSIGNED_ENTITY
# - AP_CONTAINER_REGISTRY_RESOURCE_GROUP_NAME

# Note: These are provided by the ayuda-acr-preview context
# - AP_CONTAINER_REGISTRY_HOST
# - AP_CONTAINER_REGISTRY_PASSWORD
# - AP_CONTAINER_REGISTRY_USERNAME
# - AP_USER_ASSIGNED_ENTITY
# - AP_CONTAINER_REGISTRY_RESOURCE_GROUP_NAME

# Note: These are provided by the ayuda-acr context
# - AP_CONTAINER_REGISTRY_HOST
# - AP_CONTAINER_REGISTRY_PASSWORD
# - AP_CONTAINER_REGISTRY_USERNAME
# - AP_USER_ASSIGNED_ENTITY
# - AP_CONTAINER_REGISTRY_RESOURCE_GROUP_NAME

# Note: These are provided by the ap-fsharp-template-resource-credentials-labs context
# - AZ_SERVICE_PRINCIPAL_APP_ID
# - AZ_SERVICE_PRINCIPAL_APP_PASSWORD

# Note: These are provided by the ap-fsharp-template-resource-credentials-preview context
# - AZ_SERVICE_PRINCIPAL_APP_ID
# - AZ_SERVICE_PRINCIPAL_APP_PASSWORD

# Note: These are provided by the ap-fsharp-template-resource-credentials-cloud context
# - AZ_SERVICE_PRINCIPAL_APP_ID
# - AZ_SERVICE_PRINCIPAL_APP_PASSWORD

# Note: These are provided by the az-resources-labs context
# - RESOURCE_GROUP_NAME
# - SERVICE_PLAN_NAME
# - AZ_SUBSCRIPTION_ID

# Note: These are provided by the az-resources-preview context
# - RESOURCE_GROUP_NAME
# - SERVICE_PLAN_NAME
# - AZ_SUBSCRIPTION_ID

# Note: These are provided by the az-resources-cloud context
# - RESOURCE_GROUP_NAME
# - SERVICE_PLAN_NAME
# - AZ_SUBSCRIPTION_ID

# Note: These are provided by the az-resources context
# - AZ_TENANT

parameters:
  service_name:
    default: FSharpTemplate
    type: string
  docker_name:
    default: fsharptemplate
    type: string
  terraform_env_config_file:
    default: na-ci.terraform.tfvars
    type: string

# Define the jobs for the current project.
jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
    resource_class: small
    steps:
      - checkout
      - run:
          name: Build
          command: dotnet build
          working_directory: << pipeline.parameters.service_name >>
      - run:
          name: Running Tests
          command: dotnet test
          working_directory: << pipeline.parameters.service_name >>

#  other-unit-tests:
#    ToDo
#  integration-tests:
#    ToDo

  build_image:
    docker:
      - image: circleci/buildpack-deps:latest
    resource_class: small
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker login
          command: echo $AP_CONTAINER_REGISTRY_PASSWORD | docker login $AP_CONTAINER_REGISTRY_HOST -u $AP_CONTAINER_REGISTRY_USERNAME --password-stdin
      - run:
          name: Build image
          command: docker build --tag << pipeline.parameters.docker_name >>:build-<< pipeline.number >> --tag << pipeline.parameters.docker_name >>:latest .
      - run:
          name: Save Docker image
          command: docker save -o << pipeline.parameters.docker_name >>_latest.tar "<< pipeline.parameters.docker_name >>:build-<< pipeline.number >>"
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.docker_name >>_latest.tar

  push_image:
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - attach_workspace:
          at: ./
      - setup_remote_docker
      - run:
          name: Docker login
          command: echo $AP_CONTAINER_REGISTRY_PASSWORD | docker login $AP_CONTAINER_REGISTRY_HOST -u $AP_CONTAINER_REGISTRY_USERNAME --password-stdin
      - run:
          name: Load Docker image
          command: docker load -i ./<< pipeline.parameters.docker_name >>_latest.tar
      - run:
          name: Tag image with build number
          command: docker tag << pipeline.parameters.docker_name >>:build-<< pipeline.number >> "$AP_CONTAINER_REGISTRY_HOST/<< pipeline.parameters.docker_name >>:build-<< pipeline.number >>"
      - run:
          name: Tag image latest
          command: docker tag << pipeline.parameters.docker_name >>:build-<< pipeline.number >> "$AP_CONTAINER_REGISTRY_HOST/<< pipeline.parameters.docker_name >>:latest"
      - run:
          name: Push image
          command: docker push "$AP_CONTAINER_REGISTRY_HOST/<< pipeline.parameters.docker_name >>:build-<< pipeline.number >>"
      - run:
          name: Push image as latest
          command: docker push "$AP_CONTAINER_REGISTRY_HOST/<< pipeline.parameters.docker_name >>:latest"

  terraform-single-job-labs:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    resource_class: small
    steps:
      - checkout
      - run:
          name: terraform plan & apply infrastructure
          command: |
            SERVICE_NAME=<< pipeline.parameters.service_name >>
            cd /tmp/project/Terraform
            TERRAFORM_ENV_CONFIG_FILE=<< pipeline.parameters.terraform_env_config_file >>
            ENVIRONMENT_SUFFIX=`cat /tmp/project/Terraform/$TERRAFORM_ENV_CONFIG_FILE | grep environment_suffix | awk '{print $3}' | sed -e 's/^"//' -e 's/"$//'`
            DOCKER_CONTAINER_NAME=<< pipeline.parameters.docker_name >>
            DOCKER_CONTAINER_TAG=build-<< pipeline.number >>            
            terraform init
            terraform validate
            cat >> /tmp/project/Terraform/$TERRAFORM_ENV_CONFIG_FILE \<< END
            azure_subscription_id = "$AZ_SUBSCRIPTION_ID"
            azure_subscription_tenant_id = "$AZ_TENANT"
            service_principal_appid = "$AZ_SERVICE_PRINCIPAL_APP_ID"
            service_principal_password = "$AZ_SERVICE_PRINCIPAL_APP_PASSWORD"
            docker_registry_server_name = "$AP_CONTAINER_REGISTRY_USERNAME"
            docker_registry_resource_group_name = "$AP_CONTAINER_REGISTRY_RESOURCE_GROUP_NAME"
            docker_registry_server_url = "$AP_CONTAINER_REGISTRY_HOST"
            docker_container_name = "$DOCKER_CONTAINER_NAME"
            docker_container_tag = "$DOCKER_CONTAINER_TAG"
            user_assigned_identity_name = "$AP_USER_ASSIGNED_ENTITY"
            END
            terraform import -var-file="$TERRAFORM_ENV_CONFIG_FILE" azurerm_resource_group.rg /subscriptions/$AZ_SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME
            terraform import -var-file="$TERRAFORM_ENV_CONFIG_FILE" azurerm_service_plan.sp /subscriptions/$AZ_SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.Web/serverfarms/$SERVICE_PLAN_NAME
            terraform import -var-file="$TERRAFORM_ENV_CONFIG_FILE" azurerm_container_registry.cr /subscriptions/$AZ_SUBSCRIPTION_ID/resourceGroups/$AP_CONTAINER_REGISTRY_RESOURCE_GROUP_NAME/providers/Microsoft.ContainerRegistry/registries/$AP_CONTAINER_REGISTRY_USERNAME
            terraform import -var-file="$TERRAFORM_ENV_CONFIG_FILE" azurerm_user_assigned_identity.uai /subscriptions/$AZ_SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.ManagedIdentity/userAssignedIdentities/$AP_USER_ASSIGNED_ENTITY
            terraform import -var-file="$TERRAFORM_ENV_CONFIG_FILE" azurerm_linux_web_app.as /subscriptions/$AZ_SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.Web/sites/$SERVICE_NAME$ENVIRONMENT_SUFFIX || true
            terraform import -var-file="$TERRAFORM_ENV_CONFIG_FILE" azurerm_application_insights.ai /subscriptions/$AZ_SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.Insights/components/$SERVICE_NAME$ENVIRONMENT_SUFFIX || true
            terraform import -var-file="$TERRAFORM_ENV_CONFIG_FILE" azurerm_log_analytics_workspace.law /subscriptions/$AZ_SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_NAME/providers/Microsoft.OperationalInsights/workspaces/$SERVICE_NAME$ENVIRONMENT_SUFFIX-law || true
            terraform plan -var-file="$TERRAFORM_ENV_CONFIG_FILE"
            terraform apply -auto-approve -var-file="$TERRAFORM_ENV_CONFIG_FILE"

  service-health-check:
    working_directory: /tmp/project
    docker:
      - image: cimg/base:2021.04
    resource_class: small
    steps:
      - checkout
      - run:
          name: service deployment health check
          command: |
            ENVIRONMENT_SUFFIX=`cat /tmp/project/Terraform/<< pipeline.parameters.terraform_env_config_file >> | grep environment_suffix | awk '{print $3}' | sed -e 's/^"//' -e 's/"$//'`            
            OK_200=`curl -w ' %{http_code}' "https://<< pipeline.parameters.docker_name >>$ENVIRONMENT_SUFFIX.azurewebsites.net/api/health" | awk '{print $2}'`
            if [[ $OK_200 == 200  ]]; then exit 0; else exit 1; fi

workflows:
  pull_requests:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - master
      - build_image:
          context:
            - ayuda-acr
          requires:
            - build
  deploy_infrastructure:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
      - build_image:
          context:
            - ayuda-acr
          requires:
            - build
      - push_image:
          context:
            - ayuda-acr-labs
          requires:
            - build_image
      - terraform-single-job-labs:
          requires:
            - push_image
          context:
            - ayuda-acr-labs
            - az-resources
            - az-resources-labs
            - ap-fsharp-template-resource-credentials-labs
      - service-health-check:
          requires:
            - terraform-single-job-labs